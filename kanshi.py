import json
from typing import Any
import opts as o


class Output:
    def __init__(self):
        self._opts: dict[str, Any] = {}
        self.set_enabled(True)  # default to enabled

    def set_enabled(self, enabled: bool):
        self._opts[o.ENABLED] = enabled

    def set_mode(self, width: int, height: int, rate: float | None = None):
        self._opts[o.MODE] = [width, height, rate]

    def set_position(self, x: int, y: int):
        self._opts[o.POSITION] = [x, y]

    def set_scale(self, factor: float):
        self._opts[o.SCALE] = factor

    def set_transform(self, transform: int | str):
        self._opts[o.TRANSFORM] = transform

    def set_adaptive_sync(self, enabled: bool):
        self._opts[o.ADAPTIVE_SYNC] = "on" if enabled else "off"

    def to_dict(self) -> dict:
        return self._opts.copy()

    def __str__(self) -> str:
        lines = []

        for opt, value in self._opts.items():
            match opt:
                case o.ENABLED:
                    lines.append("enable" if value else "disable")
                case o.MODE:
                    (w, h, r) = value
                    if r:
                        lines.append(f"{opt} {w}x{h}@{r}Hz")
                    else:
                        lines.append(f"{opt} {w}x{h}")
                case o.POSITION:
                    (x, y) = value
                    lines.append(f"{opt} {x},{y}")
                case o.SCALE:
                    lines.append(f"{opt} {value}")
                case o.TRANSFORM:
                    lines.append(f"{opt} {value}")
                case o.ADAPTIVE_SYNC:
                    lines.append(f"{opt} {value}")

        return "\n".join(lines)


class Profile:
    def __init__(self):
        self.outputs: dict[str, Output] = {}
        self.exec: str | None = None

    def to_dict(self) -> dict:
        return {
            "outputs": {name: opts.to_dict() for name, opts in self.outputs.items()},
            "exec": self.exec,
        }

    def __str__(self) -> str:
        output = []

        for name, output_config in self.outputs.items():
            output.append(f'\toutput "{name}" {{')
            output.append(indent_text(str(output_config), 2))
            output.append("\t}")

        return "\n".join(output)


class Config:
    def __init__(self):
        self.profiles: list[Profile] = []

    def to_dict(self) -> dict:
        return {"profiles": [p.to_dict() for p in self.profiles]}

    def __str__(self) -> str:
        output = []

        for profile in self.profiles:
            output.append("profile {")
            output.append(f"{profile}")
            output.append("}\n")

        return "\n".join(output)


def indent_text(text, tabs=1):
    """Add tabs to the beginning of each line in the text."""
    tab = "\t" * tabs
    return "\n".join(tab + line for line in text.split("\n"))


def write_configs_to_disk(config: Config):
    # write kanshi config
    with open("config-kanshi-gui", "w") as f:
        f.write("# This config was automatically generated by kanshi-gui. Any\n")
        f.write("# modifications will be overriden next time you use it.\n")
        f.write(f"{config}\n")

    # write kanshi-gui config
    with open("kanshi-gui.json", "w") as f:
        f.write(json.dumps(config.to_dict()))


def read_self_config() -> Config:
    with open("kanshi-gui.json", "r") as f:
        config = Config()
        config_json = json.loads(f.read())

        profiles = []
        for profile_json in config_json["profiles"]:
            profile = Profile()

            for name, opts in profile_json["outputs"].items():
                output = Output()
                output._opts = opts
                profile.outputs[name] = output

            if profile_json["exec"]:
                profile.exec = profile_json["exec"]

            profiles.append(profile)

        config.profiles = profiles
        return config
